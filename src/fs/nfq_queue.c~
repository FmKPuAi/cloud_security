#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <netinet/in.h>
#include <linux/types.h>
#include <linux/netfilter.h>            /* for NF_ACCEPT */
#include <libnetfilter_queue/libnetfilter_queue.h>
#include <libnetfilter_queue/libnetfilter_queue_tcp.h>
#include "pkt_modify.h"

/* Callback Function  */
static int up_cb(struct nfq_q_handle *qh, struct nfgenmsg *nfmsg,struct nfq_data *nfa, void *data)
{
    unsigned char *pdata,*ip_data; 
    int ret;
    int id = 0,data_len;
    struct nfqnl_msg_packet_hdr *ph;

    ph = nfq_get_msg_packet_hdr(nfa);
    if (ph) 
    {   
	id = ntohl(ph->packet_id);
        printf("hw_protocol=0x%04x hook=%u id=%u ",
        ntohs(ph->hw_protocol), ph->hook, id);
    }
    data_len = nfq_get_payload(nfa, (unsigned char **)&ip_data);              /* Get packet content*/
    if (data_len >= 0)
        printf("payload_len=%d\n", data_len);

    Modify_up_pkt(ip_data,data_len);
    printf("entering callback\n");
    ret = nfq_get_payload(nfa, (unsigned char **)&pdata);
    return nfq_set_verdict(qh, id, NF_ACCEPT, ret, pdata);
}

/* Callback Function  */
static int down_cb(struct nfq_q_handle *qh, struct nfgenmsg *nfmsg,struct nfq_data *nfa, void *data)
{
    unsigned char *pdata,*ip_data; 
    int ret;
    int id = 0,data_len;
    struct nfqnl_msg_packet_hdr *ph;

    ph = nfq_get_msg_packet_hdr(nfa);
    if (ph) 
    {   
	id = ntohl(ph->packet_id);
        printf("hw_protocol=0x%04x hook=%u id=%u ",
        ntohs(ph->hw_protocol), ph->hook, id);
    }
    data_len = nfq_get_payload(nfa, (unsigned char **)&ip_data);              /* Get packet content*/
    if (data_len >= 0)
        printf("payload_len=%d\n", data_len);

    Modify_down_pkt(ip_data);
    printf("entering callback\n");
    ret = nfq_get_payload(nfa, (unsigned char **)&pdata);
    return nfq_set_verdict(qh, id, NF_ACCEPT, ret, pdata);
}

void create_nfq(struct nfq_handle *(&h),struct nfq_q_handle *(&qh),int hook)
{
    printf("opening library handle\n");
    h = nfq_open();
    if (!h)
    {
	fprintf(stderr, "error during nfq_open()\n");
        exit(1);
    }

    printf("unbinding existing nf_queue handler for AF_INET (if any)\n");
    if (nfq_unbind_pf(h, AF_INET) < 0)
    {
        fprintf(stderr, "error during nfq_unbind_pf()\n");
        exit(1);
    }

    printf("binding nfnetlink_queue as nf_queue handler for AF_INET\n");
    if (nfq_bind_pf(h, AF_INET) < 0) 
    {
        fprintf(stderr, "error during nfq_bind_pf()\n");
        exit(1);
    }
    printf("binding this socket to queue '0'\n");
    if(hook == 0)
    	qh = nfq_create_queue(h,  hook, &up_cb, NULL);
    if(hook == 1)
	qh = nfq_create_queue(h,  hook, &down_cb, NULL);
    if (!qh) 
    {
        fprintf(stderr, "error during nfq_create_queue()\n");
        exit(1);
    }
    printf("setting copy_packet mode\n");
    if (nfq_set_mode(qh, NFQNL_COPY_PACKET, 0xffff) < 0)
	{
        fprintf(stderr, "can't set packet_copy mode\n");
        exit(1);
    }
}

void receive_nfq(struct nfq_handle *h)
{
    int fd;
    int rv;
    char buf[4096] __attribute__ ((aligned));

    fd = nfq_fd(h);
    while ((rv = recv(fd, buf, sizeof(buf), 0)) && rv >= 0)
    {
        printf("pkt received\n");
        nfq_handle_packet(h, buf, rv);
    }
}

void unbind_nfq(struct nfq_handle *h,struct nfq_q_handle *qh)
{
    printf("unbinding from queue 0\n");
    nfq_destroy_queue(qh);

#ifdef INSANE
    /* normally, applications SHOULD NOT issue this command, since
     * it detaches other programs/sockets from AF_INET, too ! */
    printf("unbinding from AF_INET\n");
    nfq_unbind_pf(h, AF_INET);
#endif

    printf("closing library handle\n");
    nfq_close(h);

    exit(0);
}





